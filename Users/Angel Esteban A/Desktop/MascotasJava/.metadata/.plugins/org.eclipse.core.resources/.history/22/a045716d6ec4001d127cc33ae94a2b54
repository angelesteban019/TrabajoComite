import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import java.awt.Font;
import java.awt.Color;

public class VentanaPrincipal extends JFrame implements ActionListener{

	private JPanel contentPane;
	private JLabel lblNewLabel_5;
	private JLabel lbl2;
	private JLabel lbl3;
	private JLabel lbl4;
	private JLabel lbl6;
	private JLabel lbl5;
	private JButton btnSalir;
	private JLabel lblOpciones;
	private JLabel lblMenu;
	private JTextField txtOpcion;
	

	public VentanaPrincipal() {
		initialize();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		
	}
	
	private void initialize() {
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBackground(new Color(255, 255, 128));
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JLabel lbl1 = new JLabel("1. Registrar ");
		lbl1.setFont(new Font("Yu Gothic UI Semilight", Font.BOLD | Font.ITALIC, 11));
		lbl1.setBounds(10, 81, 89, 32);
		contentPane.add(lbl1);
		
		lblNewLabel_5 = new JLabel("PETS REGISTER");
		lblNewLabel_5.setFont(new Font("Tw Cen MT Condensed Extra Bold", Font.PLAIN, 30));
		lblNewLabel_5.setHorizontalAlignment(SwingConstants.CENTER);
		lblNewLabel_5.setBounds(114, 11, 196, 34);
		contentPane.add(lblNewLabel_5);
		
		lbl2 = new JLabel("2. Buscar  ID");
		lbl2.setFont(new Font("Yu Gothic UI Semilight", Font.BOLD | Font.ITALIC, 11));
		lbl2.setBounds(10, 111, 67, 32);
		contentPane.add(lbl2);
		
		lbl3 = new JLabel("3. Buscar nombre");
		lbl3.setFont(new Font("Yu Gothic UI Semilight", Font.BOLD | Font.ITALIC, 11));
		lbl3.setBounds(10, 142, 103, 32);
		contentPane.add(lbl3);
		
		lbl4 = new JLabel("4. Eliminar Mascota");
		lbl4.setFont(new Font("Yu Gothic UI Semilight", Font.BOLD | Font.ITALIC, 11));
		lbl4.setBounds(10, 173, 103, 31);
		contentPane.add(lbl4);
		
		lbl6 = new JLabel("6. Suma edades");
		lbl6.setFont(new Font("Yu Gothic UI Semilight", Font.BOLD | Font.ITALIC, 11));
		lbl6.setBounds(10, 221, 103, 40);
		contentPane.add(lbl6);
		
		lbl5 = new JLabel("5. Lista Mascotas");
		lbl5.setFont(new Font("Yu Gothic UI Semilight", Font.BOLD | Font.ITALIC, 11));
		lbl5.setBounds(10, 195, 103, 40);
		contentPane.add(lbl5);
		
		btnSalir = new JButton("Salir");
		btnSalir.setBackground(new Color(255, 128, 128));
		btnSalir.setBounds(322, 86, 89, 23);
		btnSalir.addActionListener(this);
		contentPane.add(btnSalir);
		
		lblOpciones = new JLabel("OPCIONES");
		lblOpciones.setForeground(new Color(255, 128, 128));
		lblOpciones.setFont(new Font("Tw Cen MT Condensed Extra Bold", Font.PLAIN, 18));
		lblOpciones.setBounds(10, 59, 77, 28);
		contentPane.add(lblOpciones);
		
		lblMenu = new JLabel("MENU");
		lblMenu.setForeground(new Color(255, 128, 128));
		lblMenu.setFont(new Font("Tw Cen MT Condensed Extra Bold", Font.PLAIN, 18));
		lblMenu.setBounds(342, 59, 54, 28);
		contentPane.add(lblMenu);
		
		txtOpcion = new JTextField();
		txtOpcion.setBounds(322, 118, 86, 20);
		contentPane.add(txtOpcion);
		txtOpcion.setColumns(10);
	
	}
	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == btnSalir) {
			iniciar();
		}
	}

	private void iniciar() {
		RegistroMascotas();
	}

	private void RegistroMascotas() {
        Map<Integer, Mascota> registro = new HashMap<>();
        Scanner scanner = new Scanner(System.in);
        
        boolean ejecutar = true;
        
        while (ejecutar) {
            System.out.println("1. Registrar mascota");
            System.out.println("2. Buscar mascota por ID");
            System.out.println("3. Buscar mascota por nombre");
            System.out.println("4. Eliminar mascota");
            System.out.println("5. Imprimir lista completa de mascotas");
            System.out.println("6. Mostrar suma de todas las edades de las mascotas");
            System.out.println("7. Salir");
            System.out.println("Seleccione una opción:");
            int opcion = Integer.parseInt(txtOpcion.getText());
            
            switch (opcion) {
                case 1:
                    System.out.println("Ingrese el ID de la mascota:");
                    int id = scanner.nextInt();
                    System.out.println("Ingrese el nombre de la mascota:");
                    String nombre = scanner.next();
                    System.out.println("Ingrese el color de la mascota:");
                    String color = scanner.next();
                    System.out.println("Ingrese la edad de la mascota:");
                    int edad = scanner.nextInt();
                    System.out.println("Ingrese el tipo de la mascota:");
                    String tipo = scanner.next();
                    Mascota mascota = new Mascota(nombre, color, edad, tipo);
                    registro.put(id, mascota);
                    System.out.println("La mascota ha sido registrada exitosamente.");
                    break;
                    
                case 2:
                    System.out.println("Ingrese el ID de la mascota a buscar:");
                    int idBusqueda = scanner.nextInt();
                    if (registro.containsKey(idBusqueda)) {
                        Mascota mascotaEncontrada = registro.get(idBusqueda);
                        System.out.println("Mascota encontrada:");
                        System.out.println(mascotaEncontrada);
                    } else {
                        System.out.println("No se encontró ninguna mascota con ese ID.");
                    }
                    break;
                    
                case 3:
                    System.out.println("Ingrese el nombre de la mascota a buscar:");
                    String nombreBusqueda = scanner.next();
                    boolean encontrada = false;
                    for (Map.Entry<Integer, Mascota> entry : registro.entrySet()) {
                        if (entry.getValue().getNombre().equals(nombreBusqueda)) {
                            encontrada = true;
                            System.out.println("Mascota encontrada:");
                            System.out.println(entry.getValue());
                        }
                    }
                    if (!encontrada) {
                        System.out.println("No se encontró ninguna mascota con ese nombre.");
                    }
                    break;
                    
                case 4:
                    System.out.println("Ingrese el ID de la mascota a eliminar:");
                    int idEliminar = scanner.nextInt();
                    if (registro.containsKey(idEliminar)) {
                        registro.remove(idEliminar);
                        System.out.println("La mascota ha sido eliminada exitosamente.");
                    } else {
                        System.out.println("No se encontró ninguna mascota con ese ID.");
                    }
                    break;
                case 5:
                	System.out.println("Lista completa de mascotas:");
                	if (registro.isEmpty()) {
                	System.out.println("No hay mascotas registradas.");
                	} else {
                	for (Map.Entry<Integer, Mascota> entry : registro.entrySet()) {
                	System.out.println(entry.getValue());
                	}
                	}
                	break;
                	
                case 6:
                    int sumaEdades = 0;
                    for (Map.Entry<Integer, Mascota> entry : registro.entrySet()) {
                        sumaEdades += entry.getValue().getEdad();
                    }
                    System.out.println("La suma de las edades de todas las mascotas es: " + sumaEdades);
                    break;


                case 7:
                    ejecutar = false;
                    break;
                    
                default:
                    System.out.println("Opción inválida.");
                    break;
            }
        }
        
        scanner.close();
    }
	
		class Mascota{
			private String nombre;
			private String color;
			private int edad;
			private String tipo;

			public Mascota(String nombre, String color, int edad, String tipo) {
				this.nombre = nombre;
				this.color = color;
				this.edad = edad;
				this.tipo = tipo;
				}
			public String getNombre() {
				return nombre;
				}
			public String getColor() {
				return color;
				}
			public int getEdad() {
				return edad;
				}
			public String getTipo() {
				return tipo;
				}
			@Override
			public String toString() {
    return "Nombre: " + nombre + ", Color: " + color + ", Edad: " + edad + ", Tipo: " + tipo;
    }
		}
}




